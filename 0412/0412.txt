스레드: 실제 코드의 실행 흐름

동시에 할 일이 여러개면 스레드를 추가로 생성해서 스레드에 시킨다.

    두 가지 스레드 방법

1. threading.Thread를 받아서 실행할 함수를 만들어서 start() 하는 방법
2. threading.Thread의 파생 클래스 만들어서 그 함수안의 run() 메소드를 오버라이드해서 하는 방법

스레드의 특징: 프로세스는 자신 만의 독립된 메모리 공간을 가진다.
: 스레드는 전역변수를 같이 접근할 수 있다.
: 하지만 하나의 자원을 서로 접근하려 한다면 경쟁 상태가 발생한다.

-> 경쟁상태가 발생하지 않도록 신경을 써야한다.


    경쟁 상태 해결 방법
: 공유 자원을 쓰는 부분을 각 스레드가 '내가 쓰고 있으니까 기다려!' 라고 알려주는 것.


    스레드 동기화
: 임계구역 보호를 통한 스레드 동기화
: 특정 시간에 1개의 스레드만 임계구역에 접근할 수 있도록 함.

-Lock 클래스 사용
  -acquired(): 임계구역 진입을 위한 'lock'을 획득
   : 'lock'이 반납되면 임계구역 진입

  -release(): 임계구역 종료 후 'lock' 반납
   : 'lock'을 반납하여, 대기 중이던 스레드 중 "1개"의 스레드가 'lock'을 획득하도록 함.


    19p.
기존 채팅 프로그램의 문제점
 -한 번씩 번갈아 가면서 채팅을 해야 함
 -수신자는 메시지 수신을 위해 recv() 함수를 호출하여 블로킹 되어 있음
 -따라서, 사용자 입력을 받아서 전송할 수 없음

 그래서 만든 > 20p. tcp_thread_chat_server.py


    22p. UDP를 이용한 단체 채팅 프로그램 만들기

서버
 -채팅 서버는 수신한 메시지를 발신자를 제외한 다른 클라이언트에게 전송
 -새로운 클라이언트가 들어오면, 클라이언트 목록에 저장
 -채팅 클라이언트가 'quit'를 전송하면 해당 클라이언트를 목록에서 삭제


    29p. 공유 자원을 사용하는 프로그램


    33p. Blocking/Non-Blocking, Synchronous/Asynchronous IO

 -Blocking/Non-Blocking
: 호출되는 함수가 바로 리턴하느냐 마느냐
 - 바로 리턴하면 Non-Blocking
 - 바로 리턴하지 않으면 Blocking

 -Synchronous/Asynchronous (동기/비동기)
: 호출되는 함수의 작업 완료 여부를 '누가 신경 쓰느냐'
 - 호출되는 함수의 작업 완료롤 '호출한 함수'가 신경쓰면 Synchronous
 -  ""      ""      ""       '호출된 함수'가 신경쓰면 Asynchronous

    34p.

대부분 Blocking = Synchronous / Non-Blocking = Asynchronous
하지만 그 외도 가능은 하다..


* i/o 요청을 하고 그동안 다른애가 돌아가다가, 요청받은 함수에 결과가 오면 callback으로 호출된 함수에서 요청을 한 곳으로 응답을 준다.


    Blocking-Asynchronous

I/O Multiplexing (select)
: select 함수는 Blocking이나 여러개의 입출력을 OS가 검사하여, I/O 가능여부를 비동기적으로 알려줌

    35p. select() 함수
     + I/O (입출력) 이라고 하면, 일반적으로 파일(장치 포함)이나 소켓에 읽고 쓰는 것을 의미함.
     + 리눅스에서 select()는 파일과 소켓에 모두 사용가능하지만, 윈도우에서 "select()는 소켓만 지원함"

-문제점
 : 입출력(파일 또는 소켓)은 비동기적으로 이루어지므로, 응답이 올 때까지 블로킹 입출력은 비효율적임
 
 select(): 내가 감시할 소켓들의 리스를 인자로 넘겨주면 됨.

입력
 -rlist: 읽기 가능여부 검사할 소켓 리스트
 -wlist: 쓰기 가능여부 ""
 -xlist: 예외 발생여부 ""
 -timeout: 함수 반환할 떄까지 기다리는 시간
  + 기본값은 None으로 이벤트 발생 떄까지 반환하지 않음 (블로킹 모드)
 + 검사하고 싶지 않은 소켓 리스트는 []를 인자로 사용


    36p. 
